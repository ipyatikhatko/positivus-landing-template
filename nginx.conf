# Basic server configuration block
server {
    # Listen on port 80 (HTTP)
    listen 80;
    # Optional: Listen on port 443 (HTTPS)
    # listen 443 ssl;
    
    # Server name(s) this block handles
    server_name localhost;
    # Multiple domains example:
    # server_name example.com www.example.com;
    
    # Root directory for serving files
    root /usr/share/nginx/html;
    
    # Optional: SSL configuration
    # ssl_certificate     /path/to/cert.pem;
    # ssl_certificate_key /path/to/key.pem;
    
    # Optional: Security headers
    # add_header Strict-Transport-Security "max-age=31536000" always;
    # add_header X-Frame-Options "SAMEORIGIN";
    # add_header X-Content-Type-Options "nosniff";
    
    # Optional: Compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;
    gzip_proxied any;
    
    # Basic routing
    location / {
        # Try to serve the file directly, then try adding .html, then fallback to index.html
        try_files $uri $uri/ $uri.html /index.html;
        
        # Optional: Cache control
        expires 1h;
        add_header Cache-Control "public, no-transform";
    }
    
    # Optional: API proxy example
    # location /api/ {
    #     proxy_pass http://api-server:3000/;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection 'upgrade';
    #     proxy_set_header Host $host;
    #     proxy_cache_bypass $http_upgrade;
    # }
    
    # Optional: Static assets with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, no-transform";
    }
    
    # Optional: Deny access to . files
    # location ~ /\. {
    #     deny all;
    # }
    
    # Optional: Custom 404 page
    # error_page 404 /404.html;
    
    # Optional: Larger file uploads
    # client_max_body_size 100M;
}

# Optional: Redirect www to non-www
# server {
#     listen 80;
#     server_name www.example.com;
#     return 301 $scheme://example.com$request_uri;
# }

# Optional: Redirect HTTP to HTTPS
# server {
#     listen 80;
#     server_name example.com;
#     return 301 https://$server_name$request_uri;
# }